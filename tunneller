#!/bin/bash

SETTINGS_DIR=~/.tunneller

function usage() {
    echo -n "Tunneller version 1.0.3
Usage: $0 [OPTION]... [NAME]

Unless --list is specified, NAME is required and specifies the tunnel to work on.

Tunneller configuration is saved in ${SETTINGS_DIR}.

Options:
-a,  --add-tunnel                   Add a tunnel to NAME. Requires --local-port, optionally --remote-port and --remote-host.
-d,  --define                       Define a new server or update the host and username of an existing one.
-h,  --help                         This text.
-f,  --host [host]                  Host used to connect to NAME. Defatuls to NAME.
     --list                         List all defined names.
-l,  --local-port [port]            Local port to add or remove.
-o,  --open                         Open tunnels to NAME.
-g,  --remote-host [host]           Remote host to add. Defaults to localhost.
-p,  --remote-port [port]           Remote port to add. Defaults to --local-port.
-r,  --remove-tunnel                Remove a tunnel from NAME. Requires --local-port.
-s,  --show                         Show details defined for NAME.
-u,  --user [username]              User used to connect to NAME. Defaults to environment variable USER.
" >&2
}


UNSUPPORTED_GETOPT=64
GETOPT_ERROR=65
UNDEFINED_PARAM=66
MISSING_REQUIRED_POS_PARAM=67
UNDEFINED_NAME=68
MISSING_LOCAL_PORT=69
TUNNEL_EXISTS=70
LOCAL_PORT_IN_USE=71
TUNNEL_NOT_FOUND=72
LOW_PORT_WITHOUT_ELEVATED_RIGHTS=73
DUPLICATE_LOCAL_PORT=74

# Check that getopt version is compatible
getopt --test >/dev/null 2>&1
if [[ $? -ne 4 ]]; then
    echo "Unsupported getopt version detected." >&2
    exit ${UNSUPPORTED_GETOPT}
fi

# Define the named options this script supports
OPTIONS=adf:g:hl:op:rsu:
LONGOPTIONS=add-tunnel,define,help,host:,list,local-port:,open,remote-host:,remote-port:,remove-tunnel,show,user:

# -temporarily store output to be able to check for errors
# -e.g. use --options
# -pass arguments only via   -- "$@"   to separate them correctly
PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
    # e.g. $? == 1
    #  then getopt has complained about wrong arguments to stdout
    exit ${GETOPT_ERROR}
fi
# read getopt as output this way to handle the quoting right:
eval set -- "$PARSED"

# Set default values which can then be overwritten by parameters
username=${USER}
remoteHost="localhost"
action=show

# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -a|--add-tunnel)
            action=add
            shift;;
        -d|--define)
            action=define
            shift;;
        -f|--host)
            host=$2
            shift 2;;
        --list)
            action=list
            shift;;
        -l|--local-port)
            localPort=$2
            shift 2;;
        -o|--open)
            action=open
            shift;;
        -g|--remote-host)
            remoteHost=$2
            shift 2;;
        -p|--remote-port)
            remotePort=$2
            shift 2;;
        -r|--remove-tunnel)
            action=remove
            shift;;
        -s|--show)
            action=show
            shift;;
        -u|--user)
            username=$2
            shift 2;;
        -h|--help)
            usage
            exit
            ;;
        --) # done parsing named parameters
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit ${UNDEFINED_PARAM}
            ;;
    esac
done

if [[ "${action}" != "list" ]] && [ $# -ne 1 ]; then
    usage
    exit ${MISSING_REQUIRED_POS_PARAM}
fi

# We got this far. Ensure settings directory is created
if [ ! -d  "${SETTINGS_DIR}" ]; then
    mkdir "${SETTINGS_DIR}"
fi

case "${action}" in
    add)
        name=$1
        settingsFile="${SETTINGS_DIR}/${name}"
        if [ ! -f "${settingsFile}" ]; then
            echo "Undefined name. Define name using the --host option." >&2
            exit ${UNDEFINED_NAME}
        fi
        if [ -z "${localPort}" ]; then
            echo "Missing required --local-port option." >&2
            exit ${MISSING_LOCAL_PORT}
        fi
        
        line="-L${localPort}:${remoteHost}:${remotePort:-${localPort}}"

        if grep -qxF -- "${line}" "${settingsFile}"; then
            echo "Tunnel already exists." >&2
            exit ${TUNNEL_EXISTS}
        elif grep -F -- "-L${localPort}" "${settingsFile}"; then
            echo "A tunnel already exists for local port ${localPort} for this server." >&2
            exit ${DUPLICATE_LOCAL_PORT}
        else
            echo "${line}" >> "${settingsFile}"
            echo "Tunnel added." >&2
        fi
    ;;
    define)
        name=$1
        settingsFile="${SETTINGS_DIR}/${name}"

        if [ -f "${settingsFile}" ]; then
            echo "Server \"${name}\" already exists, updating host and username." >&2
            sed -i -e "1s/.*/${username}@${host:-${name}}/" "${settingsFile}"
        else
            echo "${username}@${host:-${name}}" > "${settingsFile}"
            echo "New server \"${name}\" defined." >&2
        fi
    ;;
    list)
        echo "Defined servers:"
        ls -1 "${SETTINGS_DIR}"
    ;;
    open)
        name=$1
        settingsFile="${SETTINGS_DIR}/${name}"

        server=$(head -1 ${settingsFile})
        tunnels=""
        while read -r line; do
            afterDashL=${line:2}
            localPort=${afterDashL%%:*}
            if [ ${localPort} -le 1024 ] && [ ! $(id -u) -eq 0 ]; then
                echo "A local port below 1024 is defined for ${name}. Please run tunneller with elevated permissions (sudo)." >&2
                exit ${LOW_PORT_WITHOUT_ELEVATED_RIGHTS}
            fi

            if ps -ef | grep ssh | grep -E "\-L(.*?:)?${localPort}:" >/dev/null 2>&1; then
                echo "An existing tunnel is already open with local port ${localPort} defined." >&2
                exit ${LOCAL_PORT_IN_USE}
            fi
            tunnels+=" ${line}"
        done < <(tail -n+2 "${settingsFile}")
        # Set title for use by auto-typing
        echo -ne "\033]0;"${server#*@}"\007"
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=1${tunnels} "${server}"
    ;;
    remove)
        name=$1
        settingsFile="${SETTINGS_DIR}/${name}"
        if [ ! -f "${settingsFile}" ]; then
            echo "Undefined name. Define name using the --host option." >&2
            exit ${UNDEFINED_NAME}
        fi
        if [ -z "${localPort}" ]; then
            echo "Missing required --local-port option." >&2
            exit ${MISSING_LOCAL_PORT}
        fi
        
        if grep -qF -- "-L${localPort}" "${settingsFile}"; then
            sed -i -e "/\-L${localPort}/d" "${settingsFile}"
            echo "Tunnel removed." >&2
        else
            echo "Tunnel for local port ${localPort} not found." >&2
            exit ${TUNNEL_NOT_FOUND}
        fi
    ;;
    show)
        name=$1
        settingsFile="${SETTINGS_DIR}/${name}"
        awk 'NR==1 { split($0,splitHost,"@"); print "Host: " splitHost[2]; print "User: " splitHost[1]; printf "%-12s%-25s%-12s\n", "Local Port", "Host", "Remote Port"; next } { toSplit=substr($0,3); split(toSplit,splitted,":"); printf "%-12s%-25s%-12s\n", splitted[1], splitted[2], splitted[3]}' "${settingsFile}"
    ;;
    *)
        echo "Programmering error"
        exit 4
    ;;
esac
