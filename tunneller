#!/bin/bash

HOSTS_FILE_PATH=/etc/hosts
SETTINGS_DIR=~/.tunneller
TUNNEL_DEFINITIONS="${SETTINGS_DIR}/servers"
RUNNING_TUNNELS="${SETTINGS_DIR}/running"
TMP_RUNNING_TUNNELS="${SETTINGS_DIR}/running~"
TMP_DL_DIR="${SETTINGS_DIR}/update"
VERSION="v1.1.0"
ONE=1

function usage() {
    echo -n "Tunneller ${VERSION}
Usage: $0 [OPTION]... [NAME]

Unless one of the --list options, --close-all or --update is specified, NAME is required and specifies the tunnel to work on.

Examples:

Define a new name:
tunneller --define --user myuser --host 123.123.123.123 myserver

Add a tunnel using default values (see default values in the Options section below):
tunneller --add-tunnel --local-port 1234 myserver

Add a tunnel with all options explicitly defined:
tunneller --add-tunnel --local-host 127.0.0.2 --local-port 1234 --remote-host 123.123.123.333 --remote-port 4321 myserver



Tunneller configuration is saved in ${SETTINGS_DIR}.

Options:
-a,  --add-tunnel                   Add a tunnel to NAME. Requires --local-port, optionally --remote-port and --remote-host.
     --close                        Close tunnels to NAME.
     --close-all                    Close all running tunnels.
-d,  --define                       Define a new server or update the host and username of an existing one.
-h,  --help                         This text.
-f,  --host [host]                  Host used to connect to NAME. Defatuls to NAME.
--lr,--list-running                 List all running names.
--ld,--list-defined                 List all defined names.
-i,  --local-host                   Local host to add. Defaults to 127.0.0.1
-n,  --local-hostname               Add a hostname to a tunnel. This will be added dynamically to /etc/hosts when the tunnel is opened.
-l,  --local-port [port]            Local port to add or remove.
-o,  --open                         Open tunnels to NAME.
-g,  --remote-host [host]           Remote host to add. Defaults to localhost.
-p,  --remote-port [port]           Remote port to add. Defaults to --local-port.
-r,  --remove-tunnel                Remove a tunnel from NAME. Requires --local-port.
-s,  --show-tunnels                 Show details defined for NAME. This is default if no options are specified.
-x,  --undefine                     Undefine NAME.
     --update                       Download and install latest version from GitHub.
-u,  --user [username]              User used to connect to NAME. Defaults to environment variable USER.
" >&2
}

SUCCESS=0
UNSUPPORTED_GETOPT=64
GETOPT_ERROR=65
UNDEFINED_PARAM=66
MISSING_REQUIRED_POS_PARAM=67
UNDEFINED_NAME=68
MISSING_LOCAL_PORT=69
TUNNEL_EXISTS=70
LOCAL_PORT_IN_USE=71
TUNNEL_NOT_FOUND=72
LOW_PORT_WITHOUT_ELEVATED_RIGHTS=73
DUPLICATE_LOCAL_PORT=74
CLOSE_WITHOUT_ELEVATED_RIGHTS=75
UNDEFINED_ACTION=76
MISSING_LOOPBACK_ADDRESS=77
SET_HOSTNAME_WITHOUT_ELEVATED_RIGHTS=78
HOSTNAME_ALREADY_EXISTS=79
DUPLICATE_LOCAL_HOSTNAME=80
RUNNING_TUNNEL_WITH_HOSTNAME=81

# Check that getopt version is compatible
getopt --test >/dev/null 2>&1
if [[ $? -ne 4 ]]; then
    echo "Unsupported getopt version detected." >&2
    exit ${UNSUPPORTED_GETOPT}
fi

# Define the named options this script supports
OPTIONS=adf:g:hi:l:n:op:rsu:x
LONGOPTIONS=add-tunnel,close,close-all,define,help,host:,ld,list-defined,list-running,lr,local-host:,local-hostname:,local-port:,open,remote-host:,remote-port:,remove-tunnel,show-tunnels,undefine,update,user:

# -temporarily store output to be able to check for errors
# -e.g. use --options
# -pass arguments only via   -- "$@"   to separate them correctly
PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
    # e.g. $? == 1
    #  then getopt has complained about wrong arguments to stdout
    exit ${GETOPT_ERROR}
fi
# read getopt as output this way to handle the quoting right:
eval set -- "$PARSED"

# Set default values which can then be overwritten by parameters
username=${USER}
remoteHost="localhost"
localHost="127.0.0.1"
action=show-tunnels

# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -a|--add-tunnel)
            action=add
            shift;;
        --close)
            action=close
            shift;;
        --close-all)
            action=close-all
            shift;;
        -d|--define)
            action=define
            shift;;
        -f|--host)
            host=$2
            shift 2;;
        --ld|--list-defined)
            action=list-defined
            shift;;
        --lr|--list-running)
            action=list-running
            shift;;
        -i|--local-host)
            localHost=$2
            shift 2;;
        -n|--local-hostname)
            localHostname=$2
            shift 2;;
        -l|--local-port)
            localPort=$2
            shift 2;;
        -o|--open)
            action=open
            shift;;
        -g|--remote-host)
            remoteHost=$2
            shift 2;;
        -p|--remote-port)
            remotePort=$2
            shift 2;;
        -r|--remove-tunnel)
            action=remove
            shift;;
        -s|--show-tunnels)
            action=show-tunnels
            shift;;
        -x|--undefine)
            action=undefine
            shift;;
        --update)
            action=update
            shift;;
        -u|--user)
            username=$2
            shift 2;;
        -h|--help)
            usage
            exit
            ;;
        --) # done parsing named parameters
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit ${UNDEFINED_PARAM}
            ;;
    esac
done

if [[ "${action}" != "list-defined" && "${action}" != "list-running" && "${action}" != "update" && "${action}" != "close-all" ]] && [ $# -ne 1 ]; then
    usage
    exit ${MISSING_REQUIRED_POS_PARAM}
fi


# We got this far. Ensure settings directory is created
if [ ! -d  "${SETTINGS_DIR}" ]; then
    mkdir "${SETTINGS_DIR}"
    mkdir "${TUNNEL_DEFINITIONS}"
elif [ ! -d "${TUNNEL_DEFINITIONS}" ]; then
    # Settings already found but no tunnel definitions directory found
    # this must be a version with definitions directly in settings dir
    # We'll move everything into tunnel definitions for compatibility
    mkdir "${TUNNEL_DEFINITIONS}"
    find ${SETTINGS_DIR} -maxdepth 1 -type f -exec mv -t "${TUNNEL_DEFINITIONS}" {} \;
fi

# Clean up any registered running tunnels, which may have died or been killed since last call
if [ -f "${RUNNING_TUNNELS}" ]; then
    touch "${TMP_RUNNING_TUNNELS}"
    while read -r line; do
        pid=${line%%|*}
        if ps $pid >/dev/null 2>&1; then
            echo "$line" >> "${TMP_RUNNING_TUNNELS}"
        fi
    done < "${RUNNING_TUNNELS}"
    mv -f "${TMP_RUNNING_TUNNELS}" "${RUNNING_TUNNELS}" 
fi

function validateDefined {
    if [ ! -f "${settingsFile}" ]; then
        echo "Undefined name. Define name using the --host option." >&2
        exit ${UNDEFINED_NAME}
    fi
}

function validateLoopbackInterfaces {
    loopbackAddress=$1
    # Check if we're on MacOS
    # since Linux and Windows automatically responds to all IPv4 loopback addresses
    # on MacOS we need to add loopback addresses
    if [[ "${OSTYPE}" =~ ^darwin ]]; then
        if ! ifconfig lo0 | grep "inet " | cut -d" " -f2 | grep -qxF "${loopbackAddress}"; then
            if [ ! $(id -u) -eq 0 ]; then
                echo "Local host ${loopbackAddress} is not bound. Please rerun with elevated permissions (sudo) to bind all necessary loopback addresses." >&2
                exit ${MISSING_LOOPBACK_ADDRESS}
            fi

            read -rp "Local host ${loopbackAddress} is not defined. Do you want to define all loopback addresses necessary for all defined tunnels now? [y/n] " confirmDefine
            if [ ! "${confirmDefine}" == "y" ]; then
                echo "Aborting loopback address definition." >&2
                exit ${SUCCESS}
            fi

            while read -r address; do
                ifconfig lo0 alias ${address}
                echo "Defined loopback address ${address}"
                # first process substitution finds all 127.*.*.* addresses defined as local hosts in tunnels
                # second process substitution finds all defined loopback addresses
                # comm compares the two, while suppressing common lines and lines only in the second argument (already defined loopback addresses)
            done < <(comm -23 <(grep -hoE -- "-L127\.[^.]+\.[^.]+\.[^:]+" "${TUNNEL_DEFINITIONS}"/* | cut -c3- | sort -u) <(ifconfig lo0 | grep "inet " | cut -d" " -f2 | sort -u))
        fi
    fi
}

function setHostname {
    localHostname=$1
    localHost=$2
    if sed -n '/### START TUNNELLER ###/,/### END TUNNELLER ###/p' "${HOSTS_FILE_PATH}" | grep "^${localHost}" | grep -qE "\s${localHostname}(\s|\$)"; then
        # hostname already defined, do nothing further
        return
    fi

    if [ ! $(id -u) -eq 0 ]; then
        echo "Trying to set hostname ${localHostname} mapping to ${localHost}. Please rerun with elevated permissions (sudo)." >&2
        exit ${SET_HOSTNAME_WITHOUT_ELEVATED_RIGHTS}
    fi

    # Remove existing different mapping of name if it exists
    sed -i "/### START TUNNELLER ###/,/### END TUNNELLER ###/ { /${localHostname}/d }" "${HOSTS_FILE_PATH}"
    # Add new mapping of name
    sed -i "/### END TUNNELLER ###/i ${localHost} ${localHostname}" "${HOSTS_FILE_PATH}"
    echo "Added hostname ${localHostname} for ${localHost}" >&2
}

function validateAlreadyRunningHostname {
    localHostname=$1
    while read -r line; do
        withoutPid=${line#*|}
        name=${withoutPid%%|*}
        runningSettingsFile="${TUNNEL_DEFINITIONS}/${name}"
        if grep -q "#${localHostname}\$" "${runningSettingsFile}"; then
            echo "${name} with a mapping for ${localHostname} is already open. Cannot open multiple tunnels with the same hostname mapping." >&2
            exit ${RUNNING_TUNNEL_WITH_HOSTNAME}
        fi
    done < "${RUNNING_TUNNELS}"
}

function validateHostname {
    # only validate non-empty hostnames
    if [ "${#localHostname}" -gt 0 ]; then
        if sed '/### START TUNNELLER ###/,/### END TUNNELLER ###/d' "${HOSTS_FILE_PATH}" | grep -qE "\s${localHostname}(\s|\$)"; then
            echo "Found ${localHostname} outside of tunneller-controlled area of hosts file." >&2
            echo "Please specify a hostname not already defined in the hosts file or remove the definition to let tunneller take control of handling the hostname." >&2
            exit ${HOSTNAME_ALREADY_EXISTS}
        fi

        if grep -q "#${localHostname}\$" "${settingsFile}"; then
            echo "A different tunnel already exists mapping local hostname ${localHostname} for this server." >&2
            exit ${DUPLICATE_LOCAL_HOSTNAME}
        fi
    fi
}

function validateDuplicateTunnel {
    line=$1
    # needed to be backwards compatible with configuration without local interface specified
    if [ "${localHost}" = "127.0.0.1" ]; then
        matchLine="-L(${localHost}:)?${localPort}:${remoteHost}:${remotePort:-${localPort}}${localHostname:+#$localHostname}"
    else
        matchLine="${line}"
    fi
    if grep -qxE -- "${matchLine}" "${settingsFile}"; then
        echo "Tunnel already exists." >&2
        exit ${TUNNEL_EXISTS}
    fi
}

function validateDuplicatePort {
    if [ "${localHost}" = "127.0.0.1" ]; then
        matchPort="-L(${localHost}:)?${localPort}:"
    else
        matchPort="-L${localHost}:${localPort}:"
    fi

    if grep -qE -- "${matchPort}" "${settingsFile}"; then
        echo "A different tunnel already exists for local host ${localHost} and local port ${localPort} for this server." >&2
        exit ${DUPLICATE_LOCAL_PORT}
    fi
}


case "${action}" in
    add)
        name=$1
        settingsFile="${TUNNEL_DEFINITIONS}/${name}"
        validateDefined
        if [ -z "${localPort}" ]; then
            echo "Missing required --local-port option." >&2
            exit ${MISSING_LOCAL_PORT}
        fi

        line="-L${localHost}:${localPort}:${remoteHost}:${remotePort:-${localPort}}${localHostname:+#$localHostname}"
        validateDuplicateTunnel "${line}"

        validateHostname
        validateDuplicatePort

        echo "${line}" >> "${settingsFile}"
        echo "Tunnel added." >&2
    ;;
    close)
        name=$1
        pid=$(grep -F "|${name}|" "${RUNNING_TUNNELS}" | cut -d"|" -f1)
        if [ -z "${pid}" ]; then
            echo "Tunnel for ${name} is not running." >&2
        else
            elevated=$(grep -F "|${name}|" "${RUNNING_TUNNELS}" | cut -d"|" -f3)
            if [ "${elevated}" == "elevated" ] && [ ! $(id -u) -eq 0 ]; then
                echo "Tunnels for ${name} were started with elevated permissions (sudo) and must be closed with elevated permissions." >&2
                exit ${CLOSE_WITHOUT_ELEVATED_RIGHTS}
            fi
            kill ${pid} 2> /dev/null
            succeeded=$?
            if [ ${succeeded} -ne 0 ]; then
                echo "Tunnels for ${name} were started with elevated permissions (sudo) and must be closed with elevated permissions." >&2
                exit ${CLOSE_WITHOUT_ELEVATED_RIGHTS}
            fi
            sed -e "/|${name}|/d" "${RUNNING_TUNNELS}" > "${TMP_RUNNING_TUNNELS}"
            mv -f "${TMP_RUNNING_TUNNELS}" "${RUNNING_TUNNELS}"
            echo "Closed tunnels to ${name}." >&2
        fi
    ;;
    close-all)
        touch "${TMP_RUNNING_TUNNELS}"
        anyElevatedWithoutPermissions=0
        while read -r running; do
            isElevated="${running##*|}"
            if [ "${isElevated}" == "elevated" ] && [ ! $(id -u) -eq 0 ]; then
                anyElevatedWithoutPermissions=1
                echo "${running}" >> "${TMP_RUNNING_TUNNELS}"
            else
                pid=${running%%|*}
                kill ${pid}
            fi
        done < "${RUNNING_TUNNELS}"
        mv -f "${TMP_RUNNING_TUNNELS}" "${RUNNING_TUNNELS}"
        if [ "${anyElevatedWithoutPermissions}" -eq 1 ]; then
            echo "Some tunnels were not closed due to being started with elevated permissions. Rerun with elevated permission to close remaining tunnels." >&2
        else
            echo "Closed all running tunnels."
        fi
    ;;
    define)
        name=$1
        settingsFile="${TUNNEL_DEFINITIONS}/${name}"

        if [ -f "${settingsFile}" ]; then
            echo "Server \"${name}\" already exists, updating host and username." >&2
            sed -e "1s/.*/${username}@${host:-${name}}/" "${settingsFile}" > "${settingsFile}.new"
            mv -f "${settingsFile}.new" "${settingsFile}"
        else
            echo "${username}@${host:-${name}}" > "${settingsFile}"
            echo "New server \"${name}\" defined." >&2
        fi
    ;;
    list-defined)
        echo "Defined servers:"
        ls -1 "${TUNNEL_DEFINITIONS}"
    ;;
    list-running)
        echo "Running servers:"
        awk -F "|" '{ print $2}' "${RUNNING_TUNNELS}"
    ;;
    open)
        name=$1
        settingsFile="${TUNNEL_DEFINITIONS}/${name}"
        validateDefined "${settingsFile}"
        server=$(head -1 ${settingsFile})
        tunnels=""
        elevated="|unelevated"
        while read -r line <&3; do
            # Extract localport from line with optional localHost
            afterDashL=${line:2}
            # if we cannot match 3 colons, the local host interface is not defined
            # and therefore deleting the matching pattern deletes nothing
            if [ "${afterDashL}" = "${afterDashL#*:*:*:}" ]; then
                localPort=${afterDashL%%:*}
                localHost="127.0.0.1"
            else
                afterLocalHost=${afterDashL#*:}
                localHost=${afterDashL%%:*}
                validateLoopbackInterfaces "${localHost}"
                localPort=${afterLocalHost%%:*}
            fi
            if [ ${localPort} -le 1024 ]; then
                if [ ! $(id -u) -eq 0 ]; then
                    echo "A local port below 1024 is defined for ${name}. Please run tunneller with elevated permissions (sudo)." >&2
                    exit ${LOW_PORT_WITHOUT_ELEVATED_RIGHTS}
                fi
                elevated="|elevated"
            fi

            if ps -ef | grep ssh | grep -E "\-L${localPort}:" >/dev/null 2>&1; then
                echo "An existing tunnel is already open with local port ${localPort} defined." >&2
                exit ${LOCAL_PORT_IN_USE}
            fi
            tunnelDef=${line%%#*}
            tunnels+=" ${tunnelDef}"
            localHostname=${line##*#}
            if [ ! "${localHostname}" = "${line}" ]; then
                validateAlreadyRunningHostname ${localHostname}
                # the substitution must remove something otherwise there is no hostname present
                setHostname ${localHostname} ${localHost}
            fi
        done 3< <(tail -n+2 "${settingsFile}")
        # Set title for use by auto-typing
        echo -ne "\033]0;"${server#*@}"\007"
        echo "Opening tunnel for ${name}. If necessary you will be prompted for your server password."
        ssh -fN -o ServerAliveInterval=60 -o ServerAliveCountMax=1${tunnels} "${server}"
        # if people do weird stuff like add multiple server names with the exact same tunnels and server this will act up
        # to make sure it doesn't act up completely we grab just the last pid we find, hopefully that is the latest started tunnel
        pid=$(ps -ef | grep '[s]sh -fN' |  grep -- "${tunnels}" | grep -- "${server}" | tail -1 | awk '{print $2}')
        echo "${pid}|${name}${elevated}" >> "${RUNNING_TUNNELS}"
    ;;
    remove)
        name=$1
        settingsFile="${TUNNEL_DEFINITIONS}/${name}"
        validateDefined "${settingsFile}"
        if [ -z "${localPort}" ]; then
            echo "Missing required --local-port option." >&2
            exit ${MISSING_LOCAL_PORT}
        fi

        # needed to be backwards compatible with configuration without local interface specified
        if [ "${localHost}" = "127.0.0.1" ]; then
            matchPort="(${localHost}:)?${localPort}:"
        else
            matchPort="${localHost}:${localPort}:"
        fi
        
        if grep -qE -- "-L${matchPort}" "${settingsFile}"; then
            sed -Ee "/\-L${matchPort}/d" "${settingsFile}" > "${settingsFile}.new"
            mv -f "${settingsFile}.new" "${settingsFile}"
            echo "Tunnel removed." >&2
        else
            echo "Tunnel for local host ${localHost} and local port ${localPort} not found." >&2
            exit ${TUNNEL_NOT_FOUND}
        fi
    ;;
    show-tunnels)
        name=$1
        settingsFile="${TUNNEL_DEFINITIONS}/${name}"
        validateDefined "${settingsFile}"
        # First line contains host and username separated by @
        # Following lines contain tunnel definitions of this format: -L[localHost?]:[localPort]:[remoteHost]:[remotePort]
        # For backwards compatibility localHost is optional
        awk 'NR==1 { split($0,splitHost,"@"); print "Host: " splitHost[2]; print "User: " splitHost[1]; printf "%-25s%-12s%-25s%-12s%-25s\n", "Local Host", "Local Port", "Remote Host", "Remote Port", "Local Hostname"; next } { toSplit=substr($0,3); match($0, /-L([^#]*)#?(.*)/, parts); localHostname=parts[2]; len=split(parts[1],splitted,":"); if(len > 3) { localHost=splitted[1]; localPort=splitted[2]; remoteHost=splitted[3]; remotePort=splitted[4]; } else { localHost=""; localPort=splitted[1]; remoteHost=splitted[2]; remotePort=splitted[3]; } printf "%-25s%-12s%-25s%-12s%-25s\n", localHost, localPort, remoteHost, remotePort, localHostname}' "${settingsFile}"
    ;;
    undefine)
        name=$1
        settingsFile="${TUNNEL_DEFINITIONS}/${name}"
        validateDefined "${settingsFile}"
        configLines=$(wc -l < "${settingsFile}")
        numTunnels=$((configLines-ONE))
        read -rp "Are you sure you want to remove ${name} and its ${numTunnels} tunnels? [y/n] " confirm
        if [ "${confirm}" == "y" ]; then
            rm -f ${settingsFile}
            echo "${name} was succesfully undefined."
        else
            echo "Undefine aborted." >&2
        fi
    ;;
    update)
        latestUrl=$(curl -s https://api.github.com/repos/Silwing/tunneller/releases/latest | grep tarball_url | cut -d '"' -f 4)
        latestVersion=${latestUrl##*/}
        if [ "${VERSION}" != "${latestVersion}" ]; then
            read -rp "Running ${VERSION}. Newer version ${latestVersion} available. Want to update? [y/n] " confirm
            if [ "${confirm}" == "y" ]; then
                mkdir "${TMP_DL_DIR}" \
                    && curl -sL ${latestUrl} | tar -xzC "${TMP_DL_DIR}" \
                    && ${TMP_DL_DIR}/*/install.sh \
                    && echo "Successfully downloaded and installed version ${latestVersion}"
                rm -rf "${TMP_DL_DIR}"
                exit ${SUCCESS}
            else
                echo "Update aborted." >&2
            fi
        else
            echo "Already running latest version ${VERSION}"
        fi
    ;;
    *)
        echo "Undefined action" >&2
        exit ${UNDEFINED_ACTION}
    ;;
esac
